name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Needed for GITHUB_TOKEN usage

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tag detection

      - name: Verify tag is on master and fetch tags
        id: is_on_master
        run: |
          set -e
          # Ensure the current tag is on master
          current_tag=${{ github.ref_name }}
          git checkout master
          if ! git merge-base --is-ancestor "$current_tag" HEAD; then
            echo "Error: Tag $current_tag is not on master branch"
            exit 1
          fi
          git fetch origin +refs/tags/*:refs/tags/*

      - name: Get Changelog Entry
        id: changelog
        run: |
          # Extract the latest version's changelog entry from CHANGELOG.md
          set -e
          changelog=$(sed -n '/^## Version /{n; :a;p;n;/^$/q;ba}' CHANGELOG.md | sed '/^$/d')
          changelog+= "\n_For more details, see the full [changelog](${{ github.server_url }}/${{ github.repository }}/blob/master/CHANGELOG.md) in the repository_\n"
          changelog=$'\n'"${changelog}"$'\n'
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "content=$changelog" >> $GITHUB_OUTPUT

      - name: Get Contributors and Commits
        id: contributors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e  # Exit on any error
          trap 'echo "Error on line $LINENO"; exit 1' ERR

          # Define repository URL for commit links
          REPO_URL="https://github.com/${{ github.repository }}"

          # Step 1: Build email-to-username mapping
          declare -A email_to_username
          declare -A email_to_name
          git log --format='%ae%x09%an' | sort -u > author_emails.txt
          while IFS=$'\t' read -r email name; do
            email_to_name["$email"]="$name"
            if [[ "$email" =~ [0-9]+\+([^@]+)@users\.noreply\.github\.com ]]; then
              username="${BASH_REMATCH[1]}"
              email_to_username["$email"]="$username"
            else
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/search/users?q=$email+in:email")
              username=$(echo "$response" | jq -r '.items[0].login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
              else
                email_to_username["$email"]=""
              fi
            fi
          done < author_emails.txt

          # Step 2: Get commits since the latest vXXX tag on master
          latest_tag=$(git tag --list 'v[0-9]*' --sort=-v:refname | head -n 2 | tail -n 1)  # Second-to-last tag (previous release)
          git log "$latest_tag"..HEAD --format="%h%x09%ae%x09%s" > commits_raw.txt
          > commits_info.txt  # Initialize file for processed commits
          while IFS=$'\t' read -r hash email message; do
            username="${email_to_username[$email]}"
            name="${email_to_name[$email]}"
            if [[ -z "$username" ]]; then
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/commits/$hash")
              username=$(echo "$response" | jq -r '.author.login // .committer.login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
              fi
            fi
            if [[ -n "$username" ]]; then
              echo "$hash|$email|$username|\"$message\"" >> commits_info.txt
            else
              echo "$hash|$email||\"$message\"" >> commits_info.txt
            fi
          done < commits_raw.txt

          # Step 3: Build contributors list from commits
          declare -A username_to_count
          declare -A username_to_name
          while IFS='|' read -r hash email username message; do
            message="${message#\"}"  # Strip leading quote
            message="${message%\"}"  # Strip trailing quote
            if [[ -n "$username" ]]; then
              username_to_count["$username"]=$(( ${username_to_count["$username"]:-0} + 1 ))
              username_to_name["$username"]="${email_to_name[$email]}"
            else
              username_to_count["$email"]=$(( ${username_to_count["$email"]:-0} + 1 ))
              username_to_name["$email"]="${email_to_name[$email]}"
            fi
          done < <(cat commits_info.txt)
          contributors=$(for key in "${!username_to_count[@]}"; do
            count="${username_to_count[$key]}"
            name="${username_to_name[$key]}"
            if [[ "$key" =~ ^[^@] ]]; then  # Username (not email)
              if [[ "$name" =~ " " ]]; then
                echo "$count|$name|[@$key](https://github.com/$key)"
              else
                echo "$count|[@$key](https://github.com/$key)|[@$key](https://github.com/$key)"
              fi
            else  # Email (no username)
              echo "$count|$name|"
            fi
          done | sort -nr | cut -d'|' -f2- | sed 's/^/* /')
          echo "Final contributors list:"
          echo "$contributors"

          # Step 4: Format commits list
          commits=$(while IFS='|' read -r hash email username message; do
            message="${message#\"}"
            message="${message%\"}"
            if [[ -n "$username" ]]; then
              printf "* [%s](%s/commit/%s) %s ([@%s](https://github.com/%s))\n" "$hash" "$REPO_URL" "$hash" "$message" "$username" "$username"
            else
              name="${email_to_name[$email]}"
              printf "* [%s](%s/commit/%s) %s (%s)\n" "$hash" "$REPO_URL" "$hash" "$message" "$name"
            fi
          done < <(cat commits_info.txt) | sed 's/%/%25/g')

          # Step 5: Set outputs for downstream use
          {
            echo "list<<EOF_CONTRIBUTORS"
            echo "$contributors"
            echo "EOF_CONTRIBUTORS"
          } >> $GITHUB_OUTPUT
          {
            echo "commits<<EOF_COMMITS"
            echo "$commits"
            echo "EOF_COMMITS"
          } >> $GITHUB_OUTPUT


      - name: Build Body Content
        id: body
        run: |
          {
            echo "content<<EOF_CONTENT"
            echo "### Changes"
            echo "${{ steps.changelog.outputs.content }}" | sed 's/%0A/\n/g'
            echo ""
            echo "### Contributors"
            echo "${{ steps.contributors.outputs.list }}"
            echo ""
            echo "### Commits"
            echo "${{ steps.contributors.outputs.commits }}"
            echo "EOF_CONTENT"
          } >> $GITHUB_OUTPUT

      - name: Display Body Content
        id: display
        run: |
          echo "${{ steps.body.outputs.content }}"

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${{ steps.body.outputs.content }}`.replace(/%0A/g, '\n');
            const tagName = context.ref.replace('refs/tags/', '');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: `${body}`,
              draft: false,
              prerelease: false
            });
