name: Test Release Creation

on:
  push:
    branches:
      - release-test

permissions:
  contents: write  # Needed for GITHUB_TOKEN usage

jobs:
  test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history

      - name: Fetch all branches
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Get Changelog Entry
        id: changelog
        run: |
          changelog=$(sed -n '/^## Version /{n; :a;p;n;/^$/q;ba}' CHANGELOG.md | sed '/^$/d')
          changelog=$'\n'"${changelog}"$'\n'
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "content=$changelog" >> $GITHUB_OUTPUT

      - name: Get Contributors and Commits
        id: contributors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e  # Exit on any error
          trap 'echo "Error on line $LINENO"; exit 1' ERR

          echo "Starting script..."

          REPO_URL="https://github.com/${{ github.repository }}"
          # Cache for email -> username and full name
          declare -A email_to_username
          declare -A email_to_name

          # Step 1: Build initial map from emails
          echo "Running git log for authors..."
          git log --format='%ae%x09%an' | sort -u > author_emails.txt
          if [[ ! -s author_emails.txt ]]; then
            echo "Error: author_emails.txt is empty or not created"
            exit 1
          fi
          echo "Author emails collected:"
          cat author_emails.txt

          echo "Processing author emails..."
          while IFS=$'\t' read -r email name; do
            echo "Processing email: $email, name: $name"
            email_to_name["$email"]="$name"
            if [[ "$email" =~ [0-9]+\+([^@]+)@users\.noreply\.github\.com ]]; then
              username="${BASH_REMATCH[1]}"
              email_to_username["$email"]="$username"
              echo "Matched no-reply email, username: $username"
            else
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/search/users?q=$email+in:email")
              username=$(echo "$response" | jq -r '.items[0].login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
                echo "API found username: $username"
              else
                email_to_username["$email"]=""
                echo "No username found for $email"
              fi
            fi
          done < author_emails.txt

          # Step 2: Process commits and fallback to SHA for missing usernames
          echo "Running git log for commits..."
          git log --format="%h%x09%ae%x09%s" | sed '/^$/d' > commits_raw.txt
          if [[ ! -s commits_raw.txt ]]; then
            echo "Error: commits_raw.txt is empty or not created"
            exit 1
          fi
          echo "Commits collected:"
          cat commits_raw.txt

          echo "Processing commits..."
          cat commits_raw.txt | while IFS=$'\t' read -r hash email message; do
            echo "Processing commit: $hash, email: $email, message: $message"
            username="${email_to_username[$email]}"
            name="${email_to_name[$email]}"
            if [[ -z "$username" ]]; then
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/commits/$hash")
              username=$(echo "$response" | jq -r '.author.login // .committer.login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
                echo "SHA lookup found username: $username for $hash"
              fi
            fi
            if [[ -n "$username" ]]; then
              echo "$hash|$email|$username|$message" >> commits_info.txt
            else
              echo "$hash|$email||$message" >> commits_info.txt
            fi
          done

          # Contributors: deduplicate by username and sort by commit count
          declare -A username_to_count
          declare -A username_to_name
          while IFS='|' read -r hash email username message; do
            if [[ -n "$username" ]]; then
              ((username_to_count["$username"]++))
              username_to_name["$username"]="${email_to_name[$email]}"
            else
              ((username_to_count["$email"]++))
              username_to_name["$email"]="${email_to_name[$email]}"
            fi
          done < commits_info.txt
          contributors=$(for key in "${!username_to_count[@]}"; do
            count="${username_to_count[$key]}"
            name="${username_to_name[$key]}"
            if [[ "$key" =~ ^[^@] ]]; then  # Username without @
              echo "$count|$name|$key"
            else  # Email (no username)
              echo "$count|$name|"
            fi
          done | sort -nr | while IFS='|' read -r count name username; do
            if [[ -n "$username" ]]; then
              if [[ "$name" =~ " " ]]; then
                echo "* $name ([@$username](https://github.com/$username))"
              else
                echo "* [@$username](https://github.com/$username)"
              fi
            else
              echo "* $name"
            fi
          done)

          # Commits: format directly from commits_info.txt
          commits=$(while IFS='|' read -r hash email username message; do
            if [[ -n "$username" ]]; then
              echo "* [$hash]($REPO_URL/commit/$hash) $message ([@$username](https://github.com/$username))"
            else
              name="${email_to_name[$email]}"
              echo "* [$hash]($REPO_URL/commit/$hash) $message ($name)"
            fi
          done < commits_info.txt | sed 's/%/%25/g')

          # Use GitHub Actions multi-line output syntax with a delimiter
          delimiter=$(openssl rand -hex 8)
          {
            echo "list<<$delimiter"
            echo "$contributors"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT
          {
            echo "commits<<$delimiter"
            echo "$commits"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT

      - name: Display Release Content
        run: |
          echo "### Changes"
          echo "${{ steps.changelog.outputs.content }}" | sed 's/%0A/\n/g'
          echo "_For more details, see the full [changelog](${{ github.server_url }}/${{ github.repository }}/blob/master/CHANGELOG.md) in the repository_"
          echo ""
          echo "### Contributors"
          echo "${{ steps.contributors.outputs.list }}"
          echo ""
          echo "### Commits"
          echo "${{ steps.contributors.outputs.commits }}"
