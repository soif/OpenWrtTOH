name: Test Release Creation

on:
  push:
    branches:
      - release-test

permissions:
  contents: write  # Needed for GITHUB_TOKEN usage

jobs:
  test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history

      - name: Fetch all branches
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Get Changelog Entry
        id: changelog
        run: |
          changelog=$(sed -n '/^## Version /{n; :a;p;n;/^$/q;ba}' CHANGELOG.md | sed '/^$/d')
          changelog=$'\n'"${changelog}"$'\n'
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "content=$changelog" >> $GITHUB_OUTPUT

      - name: Get Contributors and Commits
        id: contributors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e  # Exit on any error
          trap 'echo "Error on line $LINENO"; exit 1' ERR

          REPO_URL="https://github.com/${{ github.repository }}"
          # Cache for email -> username and full name
          declare -A email_to_username
          declare -A email_to_name

          # Step 1: Build initial map from emails
          git log --format='%ae%x09%an' | sort -u > author_emails.txt
          while IFS=$'\t' read -r email name; do
            email_to_name["$email"]="$name"
            if [[ "$email" =~ [0-9]+\+([^@]+)@users\.noreply\.github\.com ]]; then
              username="${BASH_REMATCH[1]}"
              email_to_username["$email"]="$username"
            else
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/search/users?q=$email+in:email")
              username=$(echo "$response" | jq -r '.items[0].login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
              else
                email_to_username["$email"]=""
              fi
            fi
          done < author_emails.txt

          # Step 2: Process commits and fallback to SHA for missing usernames
          git log --format="%h%x09%ae%x09%s" > commits_raw.txt
          while IFS=$'\t' read -r hash email message; do
            username="${email_to_username[$email]}"
            name="${email_to_name[$email]}"
            if [[ -z "$username" ]]; then
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/commits/$hash")
              username=$(echo "$response" | jq -r '.author.login // .committer.login // ""')
              if [[ -n "$username" && "$username" != "null" ]]; then
                email_to_username["$email"]="$username"
              fi
            fi
            if [[ -n "$username" ]]; then
              echo "$hash|$email|$username|$message" >> commits_info.txt
            else
              echo "$hash|$email||$message" >> commits_info.txt
            fi
          done < commits_raw.txt

          # Contributors: deduplicate by username and sort by commit count
          awk -F'|' '{if ($3) print $3 "|" $2; else print $2 "|" $2}' commits_info.txt | \
            sort | uniq -c | sort -nr | while read -r count key name; do
              username=$(echo "$key" | cut -d'|' -f1)
              if [[ "$username" != "$name" ]]; then  # Username exists
                if [[ "$name" =~ " " ]]; then
                  echo "* $name ([@$username](https://github.com/$username))"
                else
                  echo "* [@$username](https://github.com/$username))"
                fi
              else
                echo "* $name"
              fi
            done > contributors.txt
          contributors=$(cat contributors.txt)

          # Commits: format using a safe method
          cut -d'|' -f1 commits_info.txt > commit_hashes.txt
          git log --no-walk --format='%s' $(cat commit_hashes.txt) > commit_messages.txt
          paste -d'|' commits_info.txt commit_messages.txt | while IFS='|' read -r hash email username message _ real_message; do
            if [[ -n "$username" ]]; then
              echo "* [$hash]($REPO_URL/commit/$hash) $real_message ([@$username](https://github.com/$username))"
            else
              name="${email_to_name[$email]}"
              echo "* [$hash]($REPO_URL/commit/$hash) $real_message ($name)"
            fi
          done | sed 's/%/%25/g' > commits.txt
          commits=$(cat commits.txt)

          # Use GitHub Actions multi-line output syntax with a delimiter
          delimiter=$(openssl rand -hex 8)
          {
            echo "list<<$delimiter"
            echo "$contributors"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT
          {
            echo "commits<<$delimiter"
            echo "$commits"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT

      - name: Display Release Content
        run: |
          echo "### Changes"
          echo "${{ steps.changelog.outputs.content }}" | sed 's/%0A/\n/g'
          echo "_For more details, see the full [changelog](${{ github.server_url }}/${{ github.repository }}/blob/master/CHANGELOG.md) in the repository_"
          echo ""
          echo "### Contributors"
          echo "${{ steps.contributors.outputs.list }}"
          echo ""
          echo "### Commits"
          cat commits.txt
