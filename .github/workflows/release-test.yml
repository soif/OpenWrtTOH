name: Test Release Creation

on:
  push:
    branches:
      - release-test

permissions:
  contents: write  # Needed for GITHUB_TOKEN usage

jobs:
  test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history

      - name: Fetch all branches
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Get Changelog Entry
        id: changelog
        run: |
          changelog=$(sed -n '/^## Version /{n; :a;p;n;/^$/q;ba}' CHANGELOG.md | sed '/^$/d')
          changelog=$'\n'"${changelog}"$'\n'
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "content=$changelog" >> $GITHUB_OUTPUT

      - name: Get Contributors and Commits
        id: contributors
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_URL="https://github.com/${{ github.repository }}"
          # Cache for usernames: key is "name:email" or "sha", value is username
          declare -A username_cache

          # Function to get username from commit SHA or email
          get_username() {
            local sha="$1" name="$2" email="$3"
            local cache_key="${name}:${email}"
            local username=""

            # Check cache first
            if [[ -n "${username_cache[$cache_key]}" ]]; then
              echo "${username_cache[$cache_key]}"
              return
            fi

            # Try no-reply email first
            if [[ "$email" =~ [0-9]+\+([^@]+)@users\.noreply\.github\.com ]]; then
              username="${BASH_REMATCH[1]}"
            else
              # Query commit API for this SHA
              response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/commits/$sha")
              username=$(echo "$response" | jq -r '.author.login // .committer.login // ""')
              if [[ -z "$username" || "$username" == "null" ]]; then
                # Fallback to email search if commit API fails
                response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/search/users?q=$email+in:email")
                username=$(echo "$response" | jq -r '.items[0].login // ""')
              fi
            fi

            # Cache and return
            if [[ -n "$username" && "$username" != "null" ]]; then
              username_cache["$cache_key"]="$username"
              echo "$username"
            else
              echo "" # No username found
            fi
          }

          # Get all commits with SHA, name, and email
          git log --format="%h%x09%an%x09%ae" > commits_raw.txt
          while IFS=$'\t' read -r sha name email; do
            username=$(get_username "$sha" "$name" "$email")
            echo "$sha|$name|$username" >> commits_info.txt
          done < commits_raw.txt

          # Contributors: count commits per author and sort
          contributors=$(cat commits_info.txt | cut -d'|' -f2,3 | sort | uniq -c | sort -nr | while read -r count name username; do
            if [[ -n "$username" ]]; then
              if [[ "$name" =~ " " ]]; then
                echo "* $name ([@$username](https://github.com/$username))"
              else
                echo "* [@$username](https://github.com/$username)"
              fi
            else
              echo "* $name"
            fi
          done)

          # Commits: format with correct usernames
          while IFS='|' read -r sha name username; do
            if [[ -n "$username" ]]; then
              echo "* [$sha]($REPO_URL/commit/$sha) %s ([@$username](https://github.com/$username))"
            else
              echo "* [$sha]($REPO_URL/commit/$sha) %s ($name)"
            fi
          done < commits_info.txt | git log --no-walk --stdin --format='%s' | sed 's/%/%25/g' > commits.txt
          commits=$(cat commits.txt)

          # Use GitHub Actions multi-line output syntax with a delimiter
          delimiter=$(openssl rand -hex 8)
          {
            echo "list<<$delimiter"
            echo "$contributors"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT
          {
            echo "commits<<$delimiter"
            echo "$commits"
            echo "$delimiter"
          } >> $GITHUB_OUTPUT

      - name: Display Release Content
        run: |
          echo "### Changes"
          echo "${{ steps.changelog.outputs.content }}" | sed 's/%0A/\n/g'
          echo "_For more details, see the full [changelog](${{ github.server_url }}/${{ github.repository }}/blob/master/CHANGELOG.md) in the repository_"
          echo ""
          echo "### Contributors"
          echo "${{ steps.contributors.outputs.list }}"
          echo ""
          echo "### Commits"
          cat commits.txt
